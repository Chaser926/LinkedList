public class NodeList
{
  private Node head = null;
  private Node tail = null;

  //Method to add nodes alphabetically
  public void add(Node node)
  {
    //adds node to the head and tail if the list is empty
     if(head == null && tail == null)
     {
       head = node;
       tail = node;
       
     }
     //adds node to the beginning of the list if it comes in the alphabet before the head
        else if(head.getName().compareToIgnoreCase(node.getName()) > 0)
        {
          head.setPrev(node);
          node.setNext(head);
          head = node;
         
        }
        //search for where to enter the node in the list and enters the node in the list
     else{
       //node to keep track of the current node we are at
       Node current = head;
    
       while(current.getNext() != null)
    {
        if(current.getNext().getName().compareToIgnoreCase(node.getName()) > 0)
        {
          //adds the node and sets up prev and next
          Node temp = current.getNext();
          current.setNext(node);
          node.setPrev(current);
          node.setNext(temp);
          temp.setPrev(node);      
          
          //kicks you out of add method
          return;
        }
          
          current = current.getNext();
      
    }
    //adds node to tail correctly if the node is alphabetically last in the list   
    current.setNext(node);
    node.setPrev(current);
    tail = node;
    
    
  }  
  
}
  //method checks if a string is in the list
  public void checkString(String name)
  {
    Node tempNode = head;
         while(tempNode !=null)
        {
           if(name.equalsIgnoreCase(tempNode.getName()))
           {
             System.out.println(name + " is in the list");
             return;
           }
           tempNode= tempNode.getNext(); 
        }
      System.out.println(name + " is not in the list");
   } 
   
     
     //method returns true if the string is in the list 
     public boolean findString(String name)
  {
    Node current = head;
         while(current !=null){
           if(name.equalsIgnoreCase(current.getName()))
           {
             return true;
            }
          current= current.getNext(); 
        }
      return false;
   }
  
   //method to delete a node that matches a certain string
   public void deleteNode(String name)
  {
     //checks if the string is in the list
     if(findString(name) == true)
     { 
       //node to keep track of current
       Node current = head;
       
       while(current != null)
       { 
         //checks to see if current matches the string
         if(current.getName().equalsIgnoreCase(name))
         {
             //deletes the node
             current.getPrev().setNext(current.getNext());
             current.getNext().setPrev(current.getPrev());
             return;
           
         }
         current = current.getNext();
       }
    
     }
     else
     {
         System.out.print(name + " is not in the list, so it can not be deleted");
     }
}
  
   //this method walks forward through the linked list
    public void iterateForward()
    {
        Node current = head;
        while(current != null)
        {
            System.out.println(current.getName());
            current = current.getNext();
        }
    }
    
    
   //this method walks backward through the linked list     
    public void iterateBackward()
    {
        Node current = tail;
        
        while(current != null)
        {
            System.out.println(current.getName());
            current = current.getPrev();
        }
    }
    
  
 //this method destroys the list
  public void destroy()
  {
   head = null; 
   tail = null;    
  }
}
